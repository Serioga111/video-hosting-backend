openapi: 3.0.1
info:
  title: Viewer API
  version: "1.0"
servers:
  - url: "{scheme}://{host}:{port}/api"
    description: Dev server
    variables:
      scheme:
        default: http
        enum:
          - http
      host:
        default: localhost
      port:
        default: "8080"


paths:
  /users:
    get:
      summary: Get all users
      tags:
        - User
      responses:
        "200":
          description: Successful response with a list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDTO'
  /register:
    post:
      summary: Register a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserDTO'
        "400":
          description: Invalid input
        "500":
          description: Server error
  /user/{id}:
    get:
      summary: Get user by ID
      security:
        - BearerAuth: []
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserDTO'
        "400":
          description: Invalid user ID
        "404":
          description: User not found
    put:
      summary: Update user by ID
      security:
        - BearerAuth: []
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserDTO'
        "400":
          description: Invalid input or user ID
        "500":
          description: Server error
    delete:
      summary: Delete user by ID
      security:
        - BearerAuth: []
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User deleted
        "400":
          description: Invalid user ID
        "500":
          description: Could not delete user
  /user/by-email/{email}:
    get:
      summary: Get user by email
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
          description: User email address
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "404":
          description: User not found
        "400":
          description: Invalid input
  /login:
      post:
        summary: User login
        tags:
          - Auth
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - password
                properties:
                  email:
                    type: string
                    format: email
                  password:
                    type: string
                    format: password
        responses:
          "200":
            description: Successful login
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
          "401":
            description: Invalid credentials
          "500":
            description: Server error
  /user/logout:
    delete:
      summary: Logout user
      description: Deletes the current user's token, effectively logging them out.
      tags:
        - Auth
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Successfully logged out
        "400":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Could not delete token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /auth/refresh:
    post:
      summary: Refresh access token using refresh token from HttpOnly cookie
      tags:
        - Auth
      responses:
        '200':
          description: New access token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: New JWT access token
        '401':
          description: Refresh token missing, invalid or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid or expired refresh token
        '500':
          description: Internal server error while generating token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: could not generate access token

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: UUID
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time

    Video:
      type: object
      properties:
        id:
          type: string
        channel_id:
          type: string
        title:
          type: string
        description:
          type: string
        preview_url:
          type: string
        video_url:
          type: string
        release_date:
          type: string
          format: date-time
        is_private:
          type: boolean
        likes_count:
          type: integer
        dislikes_count:
          type: integer
        comments_count:
          type: integer
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Comment:
      type: object
      properties:
        id:
          type: string
        video_id:
          type: string
        user_id:
          type: string
        parent_comment_id:
          type: string
        content:
          type: string
        created_at:
          type: string
          format: date-time

    Playlist:
      type: object
      properties:
        id:
          type: string
        channel_id:
          type: string
        title:
          type: string
        preview_url:
          type: string
        created_at:
          type: string
          format: date-time
        views_count:
          type: integer

    Channel:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        name:
          type: string
        description:
          type: string
        avatar_url:
          type: string
        total_views:
          type: integer
        created_at:
          type: string
          format: date-time
        subscribers_count:
          type: integer
        subscribers:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'
        playlists:
          type: array
          items:
            $ref: '#/components/schemas/Playlist'
        videos:
          type: array
          items:
            $ref: '#/components/schemas/Video'

    UserSettings:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        settings:
          type: string

